TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class ABFile():
    def __init__(self, filename, create):
        # Basic filename handling
        self.Afn = filename + '.a'  # Backup file
        self.Bfn = filename + '.b'  # Writable file

        # Create or open the files
        if create:
            self.Afile = openfile(self.Afn, create)
            self.Bfile = openfile(self.Bfn, create)
            # Write 'SE' to initialize the backup file
            if create:
                self.Afile.writeat('SE', 0)

    def writeat(self, data, offset):
        # Simple write to B file
        self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Simple read from A file
        return self.Afile.readat(bytes, offset)

    def close(self):
        # Close both files
        self.Afile.close()
        self.Bfile.close()

def ABopenfile(filename, create):
    # Expose ABFile object
    return ABFile(filename, create)

# Secure dispatch module
sec_file_def = {
    "obj-type": ABFile,
    "name": "ABFile",
    "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)), "target": ABFile.writeat},
    "readat": {"type": "func", "args": ((int, type(None)), (int)), "exceptions": Exception, "return": str, "target": ABFile.readat},
    "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)), "target": ABFile.close}
}

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def, TARGET: ABopenfile}

# Secure dispatch
secure_dispatch_module()
